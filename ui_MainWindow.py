# Form implementation generated from reading ui file 'MainWindow.ui'
#
# Created by: PyQt6 UI code generator 6.7.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6                      import QtCore, QtGui, QtWidgets
from DefaultStyles.button_style import DefaultButtonStyle, DefaultMenuButtonStyle
import random, string
from converters.converters3 import UnixTimeConverter
from setup_ui import *


class Ui_MainWindow(object):
    def setupUi(self, MainWindow, theme_mode):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1300, 730)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(1300, 730))
        MainWindow.setMaximumSize(QtCore.QSize(1300, 730))
        MainWindow.setFocusPolicy(QtCore.Qt.FocusPolicy.TabFocus)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.theme_mode = theme_mode

        """TITLE"""
        self.Title = QtWidgets.QLabel(parent=self.centralwidget)
        self.Title.setGeometry(QtCore.QRect(340, 0, 631, 91))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        self.Title.setFont(font)
        self.Title.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.Title.setTextInteractionFlags(QtCore.Qt.TextInteractionFlag.NoTextInteraction)
        self.Title.setObjectName("Title")
        self.stackedWidget = QtWidgets.QStackedWidget(parent=self.centralwidget)
        self.stackedWidget.setGeometry(QtCore.QRect(240, 100, 1051, 621))
        self.stackedWidget.setStyleSheet("")
        self.stackedWidget.setObjectName("stackedWidget")
        
        """INITIALIZING HOME PAGE UI"""
        self.homepage_ui = HomePageUI(parent=self.centralwidget)
        self.stackedWidget.addWidget(self.homepage_ui.HomePage)

        """INITIALIZING ASYMMETRIC PAGE UI"""
        self.asymmetric_ui = AsymmetricPageUI(parent=self.centralwidget)
        self.stackedWidget.addWidget(self.asymmetric_ui.AsymmetricPage)

        """INITIALIZING SYMMETRIC PAGE UI"""
        self.symmetric_ui = SymmetricPageUI(parent=self.centralwidget)
        self.stackedWidget.addWidget(self.symmetric_ui.SymmetricPage)

        """INITIALIZING CIPHERS PAGE UI"""
        self.ciphers_ui = CiphersPageUI(parent=self.centralwidget)
        self.stackedWidget.addWidget(self.ciphers_ui.CiphersPage)

        """INITIALIZING HASHING ALGORITHMS PAGE UI"""
        self.hashalgo_ui = HashAlgoPageUI(parent=self.centralwidget)
        self.stackedWidget.addWidget(self.hashalgo_ui.HashAlgoPage)
        
        """INITIALIZING ENCODERS PAGE UI"""
        self.encoders_ui = EncodersPageUI(parent=self.centralwidget)
        self.stackedWidget.addWidget(self.encoders_ui.EncodersPage)

        """INITIALIZING CONVERTERS PAGE UI"""
        self.converters_ui = ConvertersPageUI(parent=self.centralwidget)
        self.stackedWidget.addWidget(self.converters_ui.ConvertersPage)

        """CRYPTANALYSIS PAGE, LABEL AND BUTTONS"""
        self.cryptanalysis_ui = CryptanalysisPageUI(parent=self.centralwidget)
        self.stackedWidget.addWidget(self.cryptanalysis_ui.CryptanalysisPage)

        """FILE HANDLING PAGE, LABEL AND BUTTONS"""
        self.filehandling_ui = FileHandlingPageUI(parent=self.centralwidget)
        self.stackedWidget.addWidget(self.filehandling_ui.FileHandlingPage)

        """OTHER TOOLS PAGE, LABEL AND BUTTONS"""
        self.othertools_ui = OtherToolsPageUI(parent=self.centralwidget)
        self.stackedWidget.addWidget(self.othertools_ui.OtherToolsPage)

        """SETTINGS PAGE"""
        self.settings_ui = SettingsPageUI(parent=self.centralwidget)
        self.settings_ui.theme_changed.connect(self.toggle_theme)
        self.stackedWidget.addWidget(self.settings_ui.SettingsPage)

        """HELP PAGE"""
        self.help_ui = HelpPageUI(parent=self.centralwidget)
        self.stackedWidget.addWidget(self.help_ui.HelpPage)

        # =========================================================================================================================
        """                                     MENU BUTTONS SETUP LAYOUT CONFIGURATION                                         """
        # =========================================================================================================================
        self.layoutWidget = QtWidgets.QWidget(parent=self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(10, 100, 211, 621))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")

        self.HomePageButton = DefaultMenuButtonStyle("Home", self.layoutWidget, object_name="HomePageButton")
        self.verticalLayout_3.addWidget(self.HomePageButton)

        self.AsymmetricEncryptionButton = DefaultMenuButtonStyle("Asymmetric Encryption", self.layoutWidget, object_name="AsymmetricEncryptionButton")
        self.verticalLayout_3.addWidget(self.AsymmetricEncryptionButton)
        self.AsymmetricEncryptionButton.setToolTip('Perform Private and Public key operations')

        self.SymmetricEncryptionButton = DefaultMenuButtonStyle("Symmetric Encryption", self.layoutWidget, object_name="SymmetricEncryptionButton")
        self.verticalLayout_3.addWidget(self.SymmetricEncryptionButton)
        self.SymmetricEncryptionButton.setToolTip('Perform single (private) key  operations')

        self.CiphersButton = DefaultMenuButtonStyle("Ciphers", self.layoutWidget, object_name="CiphersButton")
        self.verticalLayout_3.addWidget(self.CiphersButton)
        self.CiphersButton.setToolTip('Explore various ciphers, from oldest to newest')

        self.HashAlgoButton = DefaultMenuButtonStyle("Hashing Algorithms", self.layoutWidget, object_name="HashAlgoButton")
        self.verticalLayout_3.addWidget(self.HashAlgoButton)
        self.HashAlgoButton.setToolTip('Hash algorithms')

        self.EncodersButton = DefaultMenuButtonStyle("Encoders", self.layoutWidget, object_name="EncodersButton")
        self.verticalLayout_3.addWidget(self.EncodersButton)
        self.EncodersButton.setToolTip('Encode and Decode operations')

        self.ConvertersButton = DefaultMenuButtonStyle("Converters", self.layoutWidget, object_name="ConvertersButton")
        self.verticalLayout_3.addWidget(self.ConvertersButton)
        self.ConvertersButton.setToolTip('Convert text to desired formats and back')

        self.CryptanalysisButton = DefaultMenuButtonStyle("Cryptanalysis", self.layoutWidget, object_name="CryptanalysisButton")
        self.verticalLayout_3.addWidget(self.CryptanalysisButton)
        self.CryptanalysisButton.setToolTip('Explore cryptographic attack methods')

        self.FileHandlingButton = DefaultMenuButtonStyle("File Handling", self.layoutWidget, object_name="FileHandlingButton")
        self.verticalLayout_3.addWidget(self.FileHandlingButton)
        self.FileHandlingButton.setToolTip('Encrypt/Decrypt/Manipulate/Break files')

        self.OtherToolsButton = DefaultMenuButtonStyle("Other Tools", self.layoutWidget, object_name="OtherToolsButton")
        self.verticalLayout_3.addWidget(self.OtherToolsButton)
        self.OtherToolsButton.setToolTip('Explore various useful tools used in cryptography')

        # =========================================================================================================================
        """                                     CLOCK/TIMER SETUP CONFIGURATION AND MODES                                       """
        # =========================================================================================================================
        self.timeLabel = QtWidgets.QLabel(parent=self.centralwidget)
        self.timeLabel.setGeometry(QtCore.QRect(1070, 40, 240, 21))
        font = QtGui.QFont()
        font.setBold(True)
        font.setPointSize(11)
        self.timeLabel.setFont(font)
        # self.toggle_theme()

        self.timeLabel.setText("")
        self.timeLabel.setObjectName("timeLabel")

        self.modes = [
            "Crypto Key",
            "Binary Time",
            "Hexadecimal Time",
            "Unix Timestamp",
            "Reverse Time",
            "Octal Time",
            "Roman Numeral Time",
            "Morse Code Time"]
        self.current_mode_index = random.randint(0, 7)

        # Update time
        self.timer = QtCore.QTimer(self.centralwidget)
        self.timer.timeout.connect(self.update_time)
        self.timer.start(1000)  # Update every 1000 ms (1 second)

        self.mode_switch_timer = QtCore.QTimer(self.centralwidget)  # Timer for switching modes
        self.mode_switch_timer.timeout.connect(self.switch_mode)
        self.mode_switch_timer.start(30000)  # Switch mode every 30 seconds: 30000 ms

        MainWindow.setCentralWidget(self.centralwidget)
        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(9)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def toggle_theme(self, theme_mode):
        if theme_mode == "dark":
            self.theme_mode = "dark"
            self.timeLabel.setStyleSheet("color: white;")
        else:
            self.theme_mode = "light"
            self.timeLabel.setStyleSheet("color: black;")
        
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Cryptology\'s Playground"))
        self.Title.setText(_translate("MainWindow", "Welcome to Cryptology\'s Playground!"))

    def update_time(self):
        """Update the label text based on the current mode."""
        label_text = ""
        current_mode = self.modes[self.current_mode_index]
        current_time = QtCore.QTime.currentTime()

        if current_mode == "Crypto Key":
            # Display random crypto key
            random_key = ''.join(random.choices(string.ascii_uppercase + string.digits, k=15))
            label_text = f"{random_key}"

        elif current_mode == "Unix Timestamp":
            # Display current Unix timestamp
            current_date = QtCore.QDate.currentDate()
            time_parts = current_time.toString("hh:mm:ss").split(":")
            year = current_date.year()
            month = current_date.month()
            day = current_date.day()
            unix_timestamp = UnixTimeConverter.to_unix(year, month, day, int(time_parts[0]), int(time_parts[1]), int(time_parts[2]))
            label_text = f"{str(unix_timestamp)}"

        elif current_mode == "Binary Time":
            time_parts = current_time.toString("hh:mm:ss").split(":")
            binary_time = " ".join(format(int(part), '04b') for part in time_parts)
            label_text = f"{binary_time}"

        elif current_mode == "Hexadecimal Time":
            time_parts = current_time.toString("hh:mm:ss").split(":")
            hex_time = ':'.join(hex(int(part)) for part in time_parts)
            label_text = f"{hex_time}"

        elif current_mode == "Reverse Time":
            reversed_time = current_time.toString("ss:mm:hh")
            label_text = f"{reversed_time}"

        elif current_mode == "Octal Time":
            time_parts = current_time.toString("hh:mm:ss").split(":")
            octal_time = ":".join(format(int(part), 'o') for part in time_parts)
            label_text = f"{octal_time}"

        elif current_mode == "Roman Numeral Time":
            time_parts = current_time.toString("hh:mm:ss").split(":")
            roman_time = ":".join(self.to_roman(int(part)) for part in time_parts)
            label_text = f"{roman_time}"

        elif current_mode == "Morse Code Time":
            time_parts = current_time.toString("hh:mm:ss").split(":")
            morse_time = " | ".join(self.to_morse(part) for part in time_parts)
            label_text = f"{morse_time}"

        # Update the label
        self.timeLabel.setText(label_text)

    def switch_mode(self):
        """Switch to a random mode automatically every minute."""
        available_modes = list(range(len(self.modes)))  # Indices of all modes
        available_modes.remove(self.current_mode_index)  # Exclude the current mode
        self.current_mode_index = random.choice(available_modes)  # Pick a random new mode
    
    @staticmethod
    def to_morse(text):
        morse_map = {
            '0': '-----', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....',
            '6': '-....', '7': '--...', '8': '---..', '9': '----.', ':': '---...', ' ': '/'}
        return " ".join(morse_map[char] for char in text if char in morse_map)
    
    @staticmethod
    def to_roman(num):
        roman_map = [
            (1000, "M"), (900, "CM"), (500, "D"), (400, "CD"),
            (100, "C"), (90, "XC"), (50, "L"), (40, "XL"),
            (10, "X"), (9, "IX"), (5, "V"), (4, "IV"), (1, "I")]
        roman = ""
        for value, symbol in roman_map:
            while num >= value:
                roman += symbol
                num -= value
        return roman
